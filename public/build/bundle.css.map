{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../MonthlyAnomalies.svelte",
    "../../TemperatureDay.svelte",
    "../../YearlyAnomalies.svelte",
    "../../StationSelect.svelte",
    "../../TimeSelect.svelte",
    "../../BaseChart.svelte",
    "../../NormalTemperature.svelte",
    "../../NormalTemperatureRange.svelte",
    "../../CurrentTemperatures.svelte",
    "../../RecordTemperatures.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { csv } from 'd3-fetch';\n    import { timeFormat } from 'd3-time-format';\n\n    import { beforeUpdate, onMount } from 'svelte';\n    import {\n        maxDate,\n        msg,\n        language,\n        minDate,\n        contextMinYear,\n        contextMaxYear,\n        formatTemp,\n        useFahrenheit\n    } from './stores';\n\n    import DataLoaded from './DataLoaded.svelte';\n    import StationSelect from './partials/StationSelect.svelte';\n    import TimeSelect from './partials/TimeSelect.svelte';\n    import TemperatureDay from './TemperatureDay.svelte';\n    import MonthlyAnomalies from './MonthlyAnomalies.svelte';\n    import YearlyAnomalies from './YearlyAnomalies.svelte';\n\n    const tfmtIntro = timeFormat($msg.introDateFormat);\n\n    let data;\n\n    $: console.log({data})\n\n    onMount(() => load())\n\n    $: stationShort = station ? station.name : '...';\n\n    const parseRow = d => ({\n        date: new Date(d.date),\n        dateRaw: d.date,\n        tMin: +d.TNK,\n        tAvg: +d.TMK,\n        tMax: +d.TXK\n    });\n\n    $: stationFrom = station ? station.from.getFullYear() : 1980;\n\n    let promise;\n    const load = () => {\n        console.log('loading data', station);\n        if (!station) return;\n        promise = csv(\n            `/blog/interactives/2019-too-warm/data/stations/${station.id}.csv`,\n            parseRow\n        ).then(res => {\n            console.log('data loaded', res);\n            data = res;\n            return data;\n        });\n    };\n\n    let _station;\n    let _lang;\n    let station = { id: '00430', from: new Date(1960,0,1)};\n    let stations = [];\n\n    $: dailyMaxDec18 = data ? data.find(d => d.dateRaw === '2019-12-18').tMax : '...';\n\n    beforeUpdate(() => {\n        if (station !== _station) {\n            // new station selected!\n            _station = station;\n            data = false;\n            load();\n        }\n        if (_lang !== $language) {\n            document.querySelector('h1.posttitle').innerHTML = $msg.title;\n            _lang = $language;\n        }\n    });\n\n    $: loading = `<i class=\"fa fa-spinner fa-pulse fa-fw\"></i> ${$msg.loading}...`;\n</script>\n\n<style>\n    header {\n        margin-bottom: 20px;\n    }\n\n    main {\n        --hotter-color: #d00;\n        --normal-color: #777;\n        --colder-color: #09d;\n        --context-color: #bbb;\n        --white: #fff;\n        --def-color: #c30;\n        --tick-line: #d0d2d5;\n        --tick: #6c757d;\n        --bg: #eeeeee;\n    }\n\n    :global(.is-dark) main {\n        --hotter-color: #e44d4d;\n        --normal-color: #ccc;\n        --colder-color: #09d;\n        --white: #0f0e13;\n        --context-color: #777;\n        --def-color: #c30;\n        --tick-line: #403f4a;\n        --tick: #6c757d;\n        --bg: #1c1b22;\n    }\n\n    @media (max-width: 400px) {\n        main {\n            padding: 1ex;\n        }\n    }\n\n    main.story,\n    header.story {\n        max-width: 45rem;\n        font-size: 18px;\n        margin: 0 auto;\n    }\n\n    p.text-small {\n        font-size: 15px;\n        line-height: 22px;\n    }\n    .text-muted {\n        color: var(--tick);\n    }\n    @media (min-device-width: 600px) {\n        .only-mobile {\n            display: none;\n        }\n    }\n\n    @media (max-device-width: 600px) {\n        .only-desktop {\n            display: none;\n        }\n        .story p {\n            font-size: 17px;\n            line-height: 1.6;\n        }\n    }\n\n    main[lang='de'] *[lang='en'] {\n        display: none;\n    }\n\n    main[lang='en'] *[lang='de'] {\n        display: none;\n    }\n</style>\n\n<main lang={$language} class=\"story px2\">\n\n    <p class=\"p-2 text-center text-muted text-small\" lang=\"de\">\n        <a class=\"text-reset\" href=\"#/en\" on:click|preventDefault={() => $language = 'en'}>Read this text in English</a>\n        <br />\n    </p>\n    <p class=\"p-2 text-center text-muted text-small\" lang=\"en\">\n        <a class=\"text-reset\" href=\"#/de\" on:click|preventDefault={() => $language = 'de'}>Diesen Text auf deutsch lesen</a>\n        <br />\n        <a\n            class=\"text-reset\"\n            on:click|preventDefault={() => ($useFahrenheit = !$useFahrenheit)}\n            href=\"#/en\">\n            (also click here if you\n            <b>prefer temperatures in {$useFahrenheit ? 'Celsius' : 'Fahrenheit'}</b>\n            )\n        </a>\n    </p>\n\n    <p lang=\"de\">\n        Laut Deutschem Wetterdienst (DWD) war 2019 das\n        <a\n            href=\"https://www.dwd.de/DE/presse/pressemitteilungen/DE/2019/20191230_deutschlandwetter_jahr2019.pdf?__blob=publicationFile&v=3\">\n            drittwärmste Jahr in Deutschland\n        </a>\n        seit Beginn der regelmäßigen Messungen 1881 (hinter 2014 und 2018). Am 25. Juli wurde mit\n        <b>{$formatTemp(42.6)}</b>\n        ein neuer deutscher Hitzerekord aufgestellt, und lokale Rekorde wurden in fast allen\n        Wetterstationen gemessen.\n    </p>\n\n    <p lang=\"en\">\n        According to Deutsche Wetterdienst (DWD), 2019 was the third hottest year in Germany since\n        we started to measure temperatures regularly in 1881. On July 25 a new national record of\n        <b>{$formatTemp(42.6)}</b>\n        was measured, along with local records in most weather stations.\n    </p>\n\n    <p lang=\"de\">\n        Auch abseits von Rekordwerten war 2019 laut DWD \"zu trocken, zu sonnig und vor allem wärmer\n        als üblich\". Aber wer sagt eigentlich was übliche oder \"normale\" Temperaturen sind?\n    </p>\n\n    <p lang=\"en\">\n        Aside from record temperatures, DWD described the year 2019 as \"too dry, too sunny, and most\n        of all warmer than usual\". But who's to say what usual or \"normal\" temperatures are? How are\n        they defined?\n    </p>\n\n    <p lang=\"de\">\n        Als Rechenbeispiel nehmen wir uns den 18. Dezember an der Wetterstation {stationShort}. Die\n        Tageshöchsttemperatur lag an diesem Tag bei\n        <b>{$formatTemp(dailyMaxDec18)}</b>\n        . Um zu bestimmen welche Temperaturen \"normal\" für einen bestimmten Tag sind, berechnen\n        Meterologen die Mittelwerte aus den Höchst- und tiefsttemperaturen am selben Datum in einem\n        <b>Vergleichszeitraum</b>\n        , zum Beispiel zwischen {$contextMinYear} und {$contextMaxYear - 1}.\n    </p>\n\n    <p lang=\"en\">\n        So let's take a look at a single day, December 18, at weather station {stationShort}. The\n        daily maximum temperature was at\n        <b>{$formatTemp(dailyMaxDec18)}</b>\n        . Was that hotter than normal? To answer this question, meterologists compute averages of\n        maximum and minimum temperatures on the same date over a\n        <b>base period</b>\n        , for instance between {$contextMinYear} and {$contextMaxYear - 1}.\n    </p>\n\n    {#if data}\n        <h2 lang=\"de\">Wie sich der \"normale\" Temperaturbereich errechnet</h2>\n        <h2 lang=\"en\">How \"normal\" temperature ranges are being calculated</h2>\n        <p class=\"text-muted text-small mt0\" lang=\"de\">\n            Jeder Balken zeigt die Temperaturspanne am 18.12. im jeweiligen Jahr (gemessen an der\n            Wetterstation {stationShort}). Tipp: Du kannst den Vergleichszeitraum nach links und\n            rechts verschieben.\n        </p>\n        <p class=\"text-muted text-small mt0\" lang=\"en\">\n            Each bar shows the temperature range on December 18 in a given year (measured at weather\n            station {stationShort}). Hint: You can move the base period to the left and right.\n        </p>\n        <TemperatureDay {data} />\n    {:else}\n        <p class=\"text-small text-muted\">\n            {@html loading}\n        </p>\n    {/if}\n\n    <p lang=\"de\">\n        Ob ein Temperaturwert nun \"höher als normal\" ist, hängt also davon ab, mit welchem Zeitraum\n        wir vergleichen (der Zeitraum im Diagramm lässt sich verschieben um den Effekt zu\n        beobachten). Doch wie wir den Zeitraum auch verändern, das Tageshoch von\n        <b>{dailyMaxDec18}°C</b>\n        ist und bleibt ein Ausreißer für einen 18. Dezember, und damit \"zu hoch\".\n    </p>\n\n    <p lang=\"en\">\n        As we see, whether or not a given temperature is classified as \"too hot\" depends on the\n        choice of the base period (you can move the base period in the above chart to see this\n        effect). But no matter how we move the base period, the daily maximum of\n        <b>{$formatTemp(dailyMaxDec18)}</b>\n        will remain an outlier on a December 18, and therefor qualifies as \"too hot\".\n    </p>\n\n    <p lang=\"de\">\n        Natürlich war der 18. Dezember kein Einzelfall: Über das ganze Jahr hinweg gab es solche \"zu\n        heißen\" Tage. Die folgende Grafik zeigt die an der Wetterstation {stationShort} gemessenen\n        Temperaturwerte. Der hellgraue Bereich im Hintergrund zeigt die bisherigen Temperaturrekorde\n        (an dieser Wetterstation) und die kleinen Pfeile weisen die neu aufgestellten\n        Temperaturrekorde aus.\n    </p>\n\n    <p lang=\"en\">\n        Of course, the 18th of December was no isolated case. We can see these \"too-hot\" days\n        throughout the entire year. The following graphic shows daily temperature measurements at\n        the weather station {stationShort}. The area in light gray in the background shows past\n        temperature records at this station, and the small arrows point to newly set records.\n    </p>\n\n    <h2 lang=\"de\">Zu heiße Tage und Rekordtemperaturen über das ganze Jahr</h2>\n    <h2 lang=\"en\">Days too hot and temperature records all year round</h2>\n    <p lang=\"de\" class=\"text-muted text-small mt0\">\n        Das Diagramm zeigt tägliche Höchst- und Tiefstwerte der Lufttemperatur an der Wetterstation {station ? station.name : '...'}\n        zwischen {tfmtIntro($minDate)} und {tfmtIntro($maxDate)}. Jeder Tag wird durch einen Balken\n        dargestellt; ein Kreis zeigt die Tagesmitteltemperatur.\n        <span class=\"only-mobile\">\n            Tipp: drehe dein Telefon seitwärts um einen längeren Zeitraum anzusehen!\n        </span>\n    </p>\n    <p lang=\"en\" class=\"text-muted text-small mt0\">\n        This chart shows daily highs and lows of air temperature at weather station {station ? station.name : '...'}\n        between {tfmtIntro($minDate)} and {tfmtIntro($maxDate)}. Each day is represented by a bar,\n        the daily mean temperature is displayed with a circle.\n        <span class=\"only-mobile\">Tipp: rotate your phone to see a longer time frame!</span>\n    </p>\n</main>\n\n<main class=\"full-width\" lang={$language}>\n    {#if promise}\n        {#await promise}\n            <!-- promise is pending -->\n            <p class=\"text-small text-muted\">\n                {@html loading}\n            </p>\n        {:then data}\n            <DataLoaded {data} />\n        {:catch error}\n            <!-- promise was rejected -->\n            <p>Something went wrong: {error.message}</p>\n        {/await}\n    {/if}\n    <div class=\"row\">\n        <div class=\"col-md\">\n            <!-- <TimeSelect /> -->\n        </div>\n        <div class=\"col-md-auto\">\n            <img\n                alt=\"reading instructions\"\n                style=\"width:300px; max-width: 100%;margin-bottom: 20px\"\n                src=\"/blog/images/2020/2019-too-warm-key-{$language}.png\" />\n        </div>\n    </div>\n</main>\n\n<main class=\"story px2\" lang={$language}>\n\n    <p lang=\"de\">\n        Das vermehrte Aufkommen zu warmer Tage hat freilich nicht erst in diesem Jahr angefangen (du\n        kannst dir mit der Monat/Jahr-Steuerung unter dem Diagramm ältere Messungen ansehen). Was\n        wir sehen ist vielmehr die Fortsetzungen des Langzeittrends der letzten Jahrzehnte. Es lohnt\n        sich daher einen Blick auf einen längeren Zeitraum zu werfen.\n    </p>\n\n    <p lang=\"en\">\n        The increasing frequency of days that are \"too hot\" certainly didn't start this year (you\n        can browse through time using the year/month controls below the chart if you want). Rather,\n        what we see is the continuation of a long-term trend over the last decades. Therefor it's\n        worth taking a look at a longer time span\n    </p>\n\n    <p lang=\"de\">\n        Die folgende Grafik zeigt die Differenzen der Monatsmitteltemperaturem zum Monatsmittel im\n        Vergleichszeitraum — auch bekannt als Temperaturanomalien — von {!station ? 1960 : Math.max(station.from.getFullYear(), 1960)}\n        bis 2019. Die Rekordjahre 2019 und 2018 sind gut erkennbar, aber auch der Rekordwinter von\n        2006/07 fällt ins Auge.\n    </p>\n\n    <p lang=\"en\">\n        The following chart shows the differences of average monthly temperatures to the long-term\n        average over the base period — also known as temperature anomalies — between {!station ? 1960 : Math.max(station.from.getFullYear(), 1960)}\n        and 2019. We can see the heat records from 2019 and 2018 but also the record winter of\n        2006/07 is visible, too.\n    </p>\n\n    <h2 lang=\"de\">Zu warme Monate werden immer häufiger</h2>\n    <h2 lang=\"en\">Too-hot months become more frequent</h2>\n    <p lang=\"de\" class=\"text-muted text-small mt0\">\n        Die Balken zeigen mittlere Temperaturabweichungen pro Monat gegenüber dem Monatsdurchschnitt\n        im Vergleichszeitraum von {$contextMinYear} bis {$contextMaxYear - 1}). Zu warme Monate sind\n        rot dargestellt, zu kalte sind blau.\n    </p>\n    <p lang=\"en\" class=\"text-muted text-small mt0\">\n        Bars show temperature anomalies over the base period from {$contextMinYear} to {$contextMaxYear - 1}.\n        Too-hot months are shown red, too-cold months are shown in blue.\n    </p>\n    {#if data}\n        <MonthlyAnomalies {data} />\n    {:else}\n        <p class=\"text-small text-muted\">\n            {@html loading}\n        </p>\n    {/if}\n\n    <p lang=\"de\">\n        Komprimiert man die Daten weiter zu einem einzigem Temperatur-Mittelwert pro Jahr lässt sich\n        der Trend auch mathematisch berechnen und als Trendlinie darstellen. Die Stärke des Anstiegs\n        ist unterschiedlich in jeder Wetterstation, aber ansteigen tut die Temperatur überall, von\n        den\n        <a href=\"#/{$language}/05792/zugspitze\">Alpen</a>\n        bis nach\n        <a href=\"#/{$language}/02115/helgoland\">Helgoland</a>\n        in der Nordsee.\n    </p>\n\n    <p lang=\"en\">\n        If we compress the data further to yearly temperature averages we can compute the trend\n        mathematically and visualize it as trend line. The slope of this line is different in each\n        weather station, but temperatures are rising everywhere from the\n        <a href=\"#/{$language}/05792/zugspitze\">alps</a>\n        in the South up to the Northern Sea island\n        <a href=\"#/{$language}/02115/helgoland\">Helgoland</a>\n        .\n    </p>\n    <h2 lang=\"de\">Die globale Erwärmung zeigt sich auch an der Wetterstation {stationShort}</h2>\n    <h2 lang=\"en\">Global warming is visible at weather station {stationShort}, too</h2>\n    <p lang=\"de\" class=\"text-muted text-small mt0\">\n        Die Balken zeigen jährliche Temperaturanomalien an der Wetterstation {stationShort}\n        gegenüber dem Vergleichszeitraum von\n        <b>{$contextMinYear} bis {$contextMaxYear - 1}).</b>\n    </p>\n    <p lang=\"en\" class=\"text-muted text-small mt0\">\n        In this chart bars show yearly temperature anomalies at weather station {stationShort} over\n        the base period from\n        <b>{$contextMinYear} to {$contextMaxYear - 1}).</b>\n    </p>\n    {#if data}\n        <YearlyAnomalies {data} />\n    {:else}\n        <p class=\"text-small text-muted\">\n            {@html loading}\n        </p>\n    {/if}\n\n    <p lang=\"de\">\n        Auch hier ändert die Wahl des Vergleichszeitraums die Position der Grundline im Diagramm,\n        und damit auch welche Balken in rot und welche in blau erscheinen. Aber sie hat keinen\n        Einfluß auf den Anstieg der Trendlinie. Die Welt erwärmt sich, egal mit welcher Zeit wir\n        vergleichen.\n    </p>\n\n    <p lang=\"en\">\n        Again, the choice of the base period will change the baseline for this chart, and with it\n        some lines will turn from red to blue. But it won't change the slope of the trend line. The\n        world is warming, no matter what time we compare it with.\n    </p>\n\n    <div class=\"form-inline mb-3\">\n        <b>{$msg.changePeriod}:</b>\n        <input\n            style=\"width:300px;max-width: 100%\"\n            class=\"ml-2 mr-2 form-control\"\n            type=\"range\"\n            min={stationFrom}\n            max=\"1989\"\n            bind:value={$contextMinYear} />\n        {$contextMinYear} - {$contextMaxYear}\n    </div>\n\n    <p lang=\"de\">\n        Alle Grafiken in diesem Artikel beziehen sich auf die Wetterstation\n        <b>{station ? station.name : '...'} in {station ? station.state : '...'}</b>\n        . Aber da der Klimawandel sich nicht auf einzelne Regionen beschränkt, lassen sich die\n        selben Effekte auch in allen anderen deutschen Wetterstationen beobachten. Du kannst das\n        folgende Formular benutzen, um die Daten einer der anderen {stations.length} Wetterstationen\n        anzusehen, die mindestens tägliche Temperaturdaten zwischen 1980 und 2019 gesammelt haben.\n    </p>\n    <p lang=\"en\">\n        All charts in this article are referring to the weather station\n        <b>{station ? station.name : '...'} in {station ? station.state : '...'}</b>\n        . But since climate change is not limited to certain regions, the same effects can be seen\n        in all other German weather stations. You can use the form below to change to any of the {stations.length}\n        stations in Germany that collected daily temperature data between at least 1980 and 2019.\n    </p>\n    <!-- <div class=\"shadow-sm p-3 mb-5 bg-white rounded\" style=\"max-width: 30rem\">\n        <StationSelect bind:station bind:stations />\n    </div> -->\n    <h2 lang=\"de\">Quellenangabe</h2>\n    <h2 lang=\"en\">Sources</h2>\n    <p lang=\"de\">\n        Alle in diesem Artikel verwendeten Daten stammen vom\n        <b>\n            <a href=\"https://www.dwd.de/DE/\">Deutschen Wetterdienst</a>\n        </b>\n        , der diese dankenswerterweise als\n        <a href=\"https://www.dwd.de/DE/klimaumwelt/cdc/cdc_node.html\">OpenData</a>\n        zur Verfügung stellt. Weiterhin befindet sich der\n        <a href=\"https://github.com/vis4/2019-too-warm\">komplette Quellcode</a>\n        für diesen Artikel und die darin enthaltenen Grafiken auf\n        <a href=\"https://github.com/vis4/2019-too-warm\">Github</a>\n        .\n    </p>\n    <p lang=\"en\">\n        All data used in this articles comes from\n        <b>\n            <a href=\"https://www.dwd.de/EN/\">Deutschen Wetterdienst</a>\n        </b>\n        , which released them as as\n        <a href=\"https://www.dwd.de/DE/klimaumwelt/cdc/cdc_node.html\">open data</a>\n        for free. You can also find the\n        <a href=\"https://github.com/vis4/2019-too-warm\">full source code</a>\n        for this article and all contained graphics on\n        <a href=\"https://github.com/vis4/2019-too-warm\">Github</a>\n        .\n    </p>\n</main>\n",
    "<script>\n    import { scaleTime, scaleLinear } from 'd3-scale';\n    import { timeFormat } from 'd3-time-format';\n    import { mean, group } from 'd3-array';\n    import {\n        contextMinYear,\n        contextMaxYear,\n        contextRange,\n        formatTemp,\n        useFahrenheit\n    } from './stores';\n\n    export let data = [];\n\n    export let day = new Date(2019, 11, 18);\n\n    let width = 400;\n\n    const fmt = timeFormat('%Y-%m');\n    $: dayFmt = fmt(day);\n\n    $: minYear = Math.max(1950, dataClean[0].year);\n    $: maxYear = dataClean[dataClean.length - 1].year;\n\n    $: dataClean = data\n        .filter(d => d.tMin > -999 && d.tMax > -999)\n        .map(d => {\n            d.year = d.date.getFullYear();\n            d.decade = Math.floor(d.year / 10) * 10;\n            d.yearMonth = fmt(d.date);\n            return d;\n        })\n        .filter(d => d.year >= 1960 && d.year < 2020);\n\n    $: byMonth = Array.from(group(dataClean, d => d.yearMonth)).map(([key, values]) => ({\n        year: values[0].year,\n        decade: values[0].decade,\n        month: values[0].date.getMonth(),\n        date: new Date(values[0].year, values[0].date.getMonth(), 1),\n        tAvg: mean(values, d => d.tAvg)\n    }));\n\n    $: byMonthBase = byMonth.filter(d => d.year >= $contextMinYear && d.year < $contextMaxYear);\n\n    $: monthlyNormalRange = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(month => {\n        const monthValues = byMonthBase.filter(d => d.month === month);\n        return {\n            tAvg: mean(monthValues, d => d.tAvg)\n        };\n    });\n\n    $: monthlyNormalAvg = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(month => {\n        const monthValues = byMonthBase.filter(d => d.month === month);\n        return mean(monthValues, d => d.tAvg);\n    });\n\n    $: byDecade = Array.from(group(byMonth, d => d.decade).values()).map(d => ({\n        decade: d[0].decade,\n        xScale: scaleTime()\n            .domain([new Date(d[0].decade, 0, 1), new Date(d[0].decade + 10, 0, 0)])\n            .range([0, width - 40]),\n        values: d\n    }));\n\n    let dtMin = 99;\n    let dtMax = -99;\n\n    $: {\n        dtMin = 99;\n        dtMax = -99;\n        byMonth.forEach(d => {\n            const dt = d.tAvg - monthlyNormalAvg[d.month];\n            dtMin = Math.min(dtMin, dt);\n            dtMax = Math.max(dtMax, dt);\n        });\n    }\n\n    let localContextMin = $contextMinYear;\n    $: localContextMax = localContextMin + $contextRange;\n\n    $: {\n        localContextMin = $contextMinYear;\n    }\n\n    $: contextYears = dataClean.filter(d => d.year >= localContextMin && d.year < localContextMax);\n    $: normalLow = mean(contextYears, d => d.tMin);\n    $: normalHigh = mean(contextYears, d => d.tMax);\n\n    $: padding = { top: 40, right: 180, bottom: 30, left: width < 500 ? 40 : 60 };\n\n    $: decadeH = width < 500 ? 80 : 100;\n\n    $: yScale = scaleLinear()\n        .domain([dtMin, dtMax])\n        .range([decadeH - 20, 0]);\n\n    const format = (d, i) => (i ? `'${String(d.getFullYear()).substr(2)}` : d.getFullYear());\n</script>\n\n<style>\n    svg {\n        position: relative;\n        width: 100%;\n        overflow: hidden;\n    }\n\n    .tick line {\n        stroke: var(--tick-line);\n        shape-rendering: crispEdges;\n    }\n\n    .tick text {\n        fill: var(--tick);\n        font-weight: 500;\n        font-size: 14px;\n        text-anchor: start;\n    }\n\n    .x-axis .tick text {\n        dominant-baseline: alphabetic;\n        text-anchor: middle;\n    }\n\n    .y-axis text {\n        dominant-baseline: central;\n        text-anchor: start;\n        fill: var(--tick);\n        font-weight: 500;\n        font-size: 14px;\n    }\n\n    .y-axis line {\n        stroke-width: 1;\n        shape-rendering: crispEdges;\n        stroke: var(--tick-line);\n    }\n    .y-axis line.zero {\n        stroke: var(--tick);\n    }\n    text.buffer {\n        fill: #eee;\n        stroke: #eee;\n        stroke-width: 2;\n        stroke-linejoin: round;\n    }\n\n    @media (max-width: 400px) {\n        .tick text {\n            font-size: 13px;\n        }\n    }\n\n    .chart {\n        max-width: 650px;\n        margin-bottom: 20px;\n    }\n\n    .month line {\n        stroke: #bbb;\n        stroke-width: 3;\n        shape-rendering: crispEdges;\n    }\n\n    @media (max-width: 500px) {\n        .month line {\n            stroke-width: 3;\n        }\n        .x-axis .tick:nth-child(2n) text {\n            display: none;\n        }\n    }\n    line.hotter {\n        stroke: var(--hotter-color);\n    }\n    line.colder {\n        stroke: var(--colder-color);\n    }\n</style>\n\n<div class=\"chart\" bind:clientWidth={width}>\n    <svg height={byDecade.length * decadeH + 20}>\n        {#each byDecade as decade, d}\n            <g class=\"decade\" transform=\"translate(0, {d * decadeH + 10})\">\n\n                <!-- y axis -->\n                <g class=\"axis y-axis\">\n                    {#each $useFahrenheit ? [3.888888888, 0, -3.88888888] : [-4, 0, 4] as tick, i}\n                        {#if !d}\n                            <text x={width - 35} y={yScale(tick)}>\n                                {@html $formatTemp(tick, !i, true)}\n                            </text>\n                        {/if}\n                        <line\n                            class:zero={!tick}\n                            transform=\"translate(0,{yScale(tick)})\"\n                            x2={width - 40} />\n                    {/each}\n                </g>\n                <!-- x axis -->\n                <g class=\"axis x-axis\">\n                    {#each decade.xScale.ticks(8) as tick, i}\n                        <g class=\"tick\" transform=\"translate({decade.xScale(tick)}, 0)\">\n                            <line y1={yScale(-6)} y2={yScale(6)} />\n                            <g transform=\"translate(0,{decadeH - 5})\">\n                                <text\n                                    class=\"buffer\"\n                                    x={decade.xScale(new Date(tick.getTime() + 864e5 * 182)) - decade.xScale(tick)}\n                                    y=\"-10\">\n                                    {format(tick, i)}\n                                </text>\n                                <text\n                                    x={decade.xScale(new Date(tick.getTime() + 864e5 * 182)) - decade.xScale(tick)}\n                                    y=\"-15\">\n                                    {format(tick, i)}\n                                </text>\n                            </g>\n                        </g>\n                    {/each}\n                </g>\n                <g class=\"values\">\n                    {#each decade.values as d}\n                        <g\n                            class=\"month\"\n                            transform=\"translate({decade.xScale(new Date(d.date.getTime() + 864e5 * 15))},0)\">\n\n                            {#if d.tAvg < monthlyNormalAvg[d.month]}\n                                <line\n                                    class=\"colder\"\n                                    y1={yScale(0)}\n                                    y2={yScale(d.tAvg - monthlyNormalAvg[d.month])} />\n                            {/if}\n                            {#if d.tAvg > monthlyNormalAvg[d.month]}\n                                <line\n                                    class=\"hotter\"\n                                    y1={yScale(0)}\n                                    y2={yScale(d.tAvg - monthlyNormalAvg[d.month])} />\n                            {/if}\n\n                        </g>\n                    {/each}\n                </g>\n            </g>\n        {/each}\n    </svg>\n</div>\n",
    "<script>\n    import { scaleLinear } from 'd3-scale';\n    import { timeFormat } from 'd3-time-format';\n    import { mean } from 'd3-array';\n    import {\n        msg,\n        contextMinYear,\n        contextRange,\n        getTempTicks,\n        toF,\n        useFahrenheit,\n        formatTemp\n    } from './stores';\n\n    export let data = [];\n\n    export let day = new Date(2019, 11, 18);\n    const fmt = timeFormat('-%m-%d');\n    $: dayFmt = fmt(day);\n\n    $: minYear = Math.max(1950, dataClean[0].year);\n    $: maxYear = dataClean[dataClean.length - 1].year;\n\n    $: dataClean = data\n        .filter(d => d.tMin > -999 && d.tMax > -999)\n        .map(d => {\n            d.year = d.date.getFullYear();\n            return d;\n        })\n        .filter(d => d.dateRaw.substr(4) === dayFmt && d.year >= 1950)\n        .reverse();\n\n    let tMin = 99;\n    let tMax = -99;\n\n    $: {\n        tMin = 99;\n        tMax = -99;\n        dataClean.forEach(d => {\n            tMin = Math.min(tMin, d.tMin);\n            tMax = Math.max(tMax, d.tMax);\n        });\n    }\n\n    let localContextMin = $contextMinYear;\n    $: localContextMax = localContextMin + $contextRange;\n\n    $: {\n        localContextMin = $contextMinYear;\n    }\n\n    $: contextYears = dataClean.filter(d => d.year >= localContextMin && d.year < localContextMax);\n    $: normalLow = mean(contextYears, d => d.tMin);\n    $: normalHigh = mean(contextYears, d => d.tMax);\n\n    let width = 400;\n    const height = 300;\n\n    $: padding = { top: 40, right: 180, bottom: 30, left: width < 500 ? 40 : 60 };\n\n    $: xScale = scaleLinear()\n        .domain([minYear, maxYear])\n        .range([padding.left, width - padding.right]);\n\n    $: xTicks = xScale.ticks(5);\n\n    $: yScale = scaleLinear()\n        .domain([tMin - 3, tMax + 3])\n        .range([height - padding.bottom, padding.top]);\n\n    $: yTicks = $getTempTicks(yScale, 6);\n\n    $: format = (d, i) => d;\n    $: formatMobile = (d, i) => `'${String(d).substr(2)}`;\n\n    let dragging = false;\n    let dragStartX;\n\n    function dragstart(event) {\n        dragStartX = getOffset(event);\n        dragging = true;\n    }\n    function getOffset(event) {\n        return event.targetTouches ? event.targetTouches[0].screenX : event.clientX;\n    }\n    function drag(event) {\n        if (dragging) {\n            const offset = getOffset(event) - dragStartX;\n            localContextMin = Math.min(\n                maxYear - $contextRange,\n                Math.max(minYear, Math.round(xScale.invert(xScale(localContextMin) + offset)))\n            );\n            dragStartX = getOffset(event);\n        }\n    }\n    function dragend(event) {\n        if (dragging) {\n            dragging = false;\n            $contextMinYear = localContextMin;\n        }\n    }\n</script>\n\n<style>\n    svg {\n        position: relative;\n        width: 100%;\n        overflow: hidden;\n    }\n\n    .tick line {\n        stroke: var(--tick-line);\n        shape-rendering: crispEdges;\n    }\n\n    .tick text {\n        fill: var(--tick);\n        font-weight: 500;\n        font-size: 14px;\n        text-anchor: start;\n    }\n\n    .x-axis .tick text {\n        text-anchor: middle;\n        dominant-baseline: alphabetic;\n    }\n\n    line.zero {\n        stroke-width: 2;\n        stroke: currentColor;\n        stroke-dasharray: 3, 3;\n        opacity: 0.5;\n    }\n\n    @media (max-width: 400px) {\n        .tick text {\n            font-size: 13px;\n        }\n    }\n\n    .chart {\n        max-width: 600px;\n        margin-bottom: 20px;\n    }\n    .day line {\n        pointer-events: none;\n        stroke: #888;\n        stroke-width: 2;\n        shape-rendering: crispEdges;\n    }\n    .day.reference line {\n        stroke: currentColor;\n    }\n    .context {\n        cursor: grab;\n    }\n    .context rect {\n        fill: var(--white);\n        opacity: 0.5;\n    }\n    .context text {\n        fill: var(--tick);\n        pointer-events: none;\n        text-anchor: middle;\n        font-size: 14px;\n        dominant-baseline: central;\n    }\n    .day:last-child line {\n        stroke-width: 4;\n    }\n    .day line.hotter {\n        stroke: var(--hotter-color);\n    }\n    .day line.colder {\n        stroke: var(--colder-color);\n    }\n    .normal-high text,\n    .normal-low text {\n        font-weight: 400;\n        font-size: 13px;\n        fill: #6c757d;\n    }\n    .normal-high text {\n        dominant-baseline: alphabetic;\n    }\n    .normal-low text {\n        dominant-baseline: hanging;\n    }\n    .normal-high text.temp,\n    .normal-low text.temp {\n        font-weight: 500;\n        font-size: 15px;\n    }\n    .normal-high text.temp {\n        fill: var(--hotter-color);\n    }\n    .normal-low text.temp {\n        fill: var(--colder-color);\n    }\n    .normal-range {\n        opacity: 0.03;\n    }\n    .normal text {\n        dominant-baseline: central;\n        font-size: 14px;\n        font-weight: 400;\n        fill: #6c757d;\n    }\n</style>\n\n<svelte:window on:mousemove={drag} on:mouseup={dragend} on:touchmove={drag} on:touchend={dragend} />\n\n<div class=\"chart\" bind:clientWidth={width}>\n    <svg {height}>\n        <g>\n            <!-- y axis -->\n            <g class=\"axis y-axis\">\n                {#each yTicks as tick, i}\n                    <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick)})\">\n                        <line x2=\"5\" />\n                        <text y=\"-4\">\n                            {@html $formatTemp(tick, !i)}\n                        </text>\n                    </g>\n                {/each}\n            </g>\n\n            <!-- x axis -->\n            <g class=\"axis x-axis\">\n                {#each xTicks as tick, i}\n                    <g class=\"tick tick-{tick}\" transform=\"translate({xScale(tick)},{height})\">\n                        <line y1=\"-{height - padding.top}\" y2=\"-{padding.bottom}\" x1=\"0\" x2=\"0\" />\n                        <g>\n                            <text y=\"0\">{(width < 500 ? formatMobile : format)(tick, i)}</text>\n\n                        </g>\n                    </g>\n                {/each}\n            </g>\n\n            <g class=\"context\" on:mousedown={dragstart} on:touchstart={dragstart}>\n                <rect\n                    x={xScale(localContextMin - 0.5)}\n                    width={xScale(localContextMax) - xScale(localContextMin)}\n                    height={height - padding.bottom} />\n                <text\n                    transform=\"translate({xScale(0.5 * (localContextMin + localContextMax - 1))},\n                    20)\">\n                    ◂ {$msg.basePeriod} ▸\n                </text>\n            </g>\n\n            <rect\n                class=\"normal-range\"\n                height={yScale(normalLow) - yScale(normalHigh)}\n                width={width - 40}\n                y={yScale(normalHigh)}\n                x={padding.left - 20} />\n\n            <g>\n                {#each dataClean as d}\n                    <g\n                        class=\"day\"\n                        class:reference={d.year >= localContextMin && d.year < localContextMax}\n                        transform=\"translate({Math.round(xScale(d.year))},0)\">\n                        {#if d.year < localContextMin || d.year >= localContextMax}\n                            <g transform=\"translate({d.year === 2019 ? 10 : 0},0)\">\n                                {#if d.tMin < normalLow}\n                                    <line\n                                        class=\"colder\"\n                                        y1={yScale(d.tMin)}\n                                        y2={yScale(Math.min(d.tMax, normalLow))} />\n                                {/if}\n                                {#if d.tMax > normalHigh}\n                                    <line\n                                        class=\"hotter\"\n                                        y1={yScale(d.tMax)}\n                                        y2={yScale(Math.max(d.tMin, normalHigh))} />\n                                {/if}\n                                {#if d.tMin < normalHigh && d.tMax > normalLow}\n                                    <line\n                                        class=\"normal\"\n                                        y1={yScale(Math.max(normalLow, d.tMin))}\n                                        y2={yScale(Math.min(normalHigh, d.tMax))} />\n                                {/if}\n                            </g>\n                        {:else}\n                            <line y1={yScale(d.tMin)} y2={yScale(d.tMax)} />\n                        {/if}\n                        <!-- <circle\n                        r=\"3\"\n                        transform=\"translate(0,{yScale(d.tAvg)})\" /> -->\n                    </g>\n                {/each}\n            </g>\n\n            <g class=\"normal-high\" transform=\"translate(0,{yScale(normalHigh)})\">\n                <line class=\"zero\" x1={padding.left - 20} x2={width} />\n                <g transform=\"translate({width - padding.right + 30},-5)\">\n                    <text class=\"temp\">\n                        {@html $formatTemp(normalHigh)}\n                    </text>\n                    <text transform=\"translate(0,-35)\">\n                        <tspan x=\"0\">{$msg.dailyAvgHighOn}</tspan>\n                        <tspan x=\"0\" dy=\"15\">\n                            18.12. ({localContextMin} - {localContextMax - 1})\n                        </tspan>\n                    </text>\n                </g>\n            </g>\n\n            <g class=\"normal-low\" transform=\"translate(0,{yScale(normalLow)})\">\n                <line class=\"zero\" x1={padding.left - 20} x2={width} />\n                <text class=\"temp\" transform=\"translate({width - padding.right + 30},+5)\">\n                    {@html $formatTemp(normalLow)}\n                </text>\n                <text transform=\"translate({width - padding.right + 30},25)\">\n                    <tspan x=\"0\">{$msg.dailyAvgLowOn}</tspan>\n                    <tspan x=\"0\" dy=\"15\">18.12. ({localContextMin} - {localContextMax - 1})</tspan>\n                </text>\n            </g>\n\n            <g class=\"normal\" transform=\"translate(0,{yScale((normalLow + normalHigh) * 0.5)})\">\n                <text transform=\"translate({width - padding.right + 30},0)\">\n                    \"{$msg.normalRange}\"\n                </text>\n            </g>\n        </g>\n    </svg>\n</div>\n",
    "<script>\n    import { scaleTime, scaleLinear } from 'd3-scale';\n    import { timeFormat } from 'd3-time-format';\n    import { mean, group } from 'd3-array';\n    import {\n        contextMinYear,\n        contextMaxYear,\n        contextRange,\n        formatTemp,\n        useFahrenheit,\n        getTempTicks\n    } from './stores';\n    import leastSquares from './leastSquares';\n\n    export let data = [];\n\n    export let day = new Date(2019, 11, 18);\n\n    const height = 200;\n    let width = 600;\n\n    const fmt = timeFormat('%Y-%m');\n    $: dayFmt = fmt(day);\n\n    const minYear = 1900;\n    const maxYear = 2019;\n\n    $: dataClean = data.filter(d => d.tMin > -999 && d.tMax > -999);\n\n    $: byYear = Array.from(group(dataClean, d => d.date.getFullYear()))\n        .map(([key, values]) => ({\n            year: values[0].date.getFullYear(),\n            tAvg: values.length > 340 ? mean(values, d => d.tAvg) : Number.NaN\n        }))\n        .filter(d => !isNaN(d.tAvg) && d.year >= minYear && d.year <= maxYear)\n        .sort((a, b) => a.year - b.year);\n\n    $: baseTemp = mean(\n        byYear.filter(d => d.year >= $contextMinYear && d.year < $contextMaxYear),\n        d => d.tAvg\n    );\n\n    let dtMin = 99;\n    let dtMax = -99;\n\n    $: {\n        dtMin = 99;\n        dtMax = -99;\n        byYear.forEach(d => {\n            const dt = d.tAvg - baseTemp;\n            dtMin = Math.min(dtMin, dt);\n            dtMax = Math.max(dtMax, dt);\n        });\n    }\n\n    $: sq = leastSquares(\n        byYear.map(d => d.year),\n        byYear.map(d => d.tAvg - baseTemp)\n    );\n    $: padding = { top: 20, right: 60, bottom: 30, left: 20 };\n\n    $: xScale = scaleLinear()\n        .domain([byYear[0].year, byYear[byYear.length - 1].year + 1])\n        .range([padding.left, width - padding.right]);\n\n    $: yScale = scaleLinear()\n        .domain([dtMin, dtMax])\n        .range([height - padding.bottom - padding.top, 0]);\n\n    $: yTicks = $getTempTicks(yScale, 4);\n\n    const format = (d, i) => d;\n</script>\n\n<style>\n    svg {\n        position: relative;\n        width: 100%;\n        overflow: hidden;\n    }\n\n    .tick line {\n        stroke: var(--tick-line);\n        shape-rendering: crispEdges;\n    }\n\n    .tick text {\n        fill: var(--tick);\n        font-weight: 500;\n        font-size: 14px;\n        text-anchor: start;\n    }\n\n    .x-axis .tick text {\n        dominant-baseline: text-after-edge;\n        text-anchor: middle;\n    }\n\n    .y-axis text {\n        dominant-baseline: central;\n        text-anchor: start;\n        fill: var(--tick);\n        font-weight: 500;\n        font-size: 14px;\n    }\n\n    .y-axis line {\n        stroke-width: 1;\n        shape-rendering: crispEdges;\n        stroke: var(--tick-line);\n    }\n    .y-axis line.zero {\n        stroke: var(--tick);\n    }\n    text.buffer {\n        fill: #eee;\n        stroke: #eee;\n        stroke-width: 2;\n        stroke-linejoin: round;\n    }\n\n    @media (max-width: 400px) {\n        .tick text {\n            font-size: 13px;\n        }\n    }\n\n    .chart {\n        max-width: 650px;\n        margin-bottom: 20px;\n    }\n\n    .year line {\n        stroke: #bbb;\n        stroke-width: 3;\n        shape-rendering: crispEdges;\n    }\n\n    @media (max-width: 500px) {\n        .year line {\n            stroke-width: 3;\n        }\n        .x-axis .tick:nth-child(2n) text {\n            display: none;\n        }\n    }\n    line.hotter {\n        stroke: var(--hotter-color);\n    }\n    line.colder {\n        stroke: var(--colder-color);\n    }\n    line.trend {\n        stroke: currentColor;\n        stroke-width: 2;\n        stroke-linecap: round;\n        stroke-linejoin: round;\n        opacity: 0.8;\n        stroke-dasharray: 2, 6;\n    }\n</style>\n\n<div class=\"chart\" bind:clientWidth={width}>\n    <svg {height}>\n        <g transform=\"translate(0,{padding.top})\">\n            <!-- y axis -->\n            <g class=\"axis y-axis\">\n                {#each yTicks as tick, i}\n                    <text x={width - padding.right + 5} y={yScale(tick)}>\n                        {@html $formatTemp(tick, !i, true)}\n                    </text>\n                    <line\n                        class:zero={!tick}\n                        transform=\"translate(0,{yScale(tick)})\"\n                        x1={padding.left}\n                        x2={width - padding.right} />\n                {/each}\n            </g>\n            <!-- x axis -->\n            <g class=\"axis x-axis\">\n                {#each xScale.ticks(8) as tick, i}\n                    <g class=\"tick\" transform=\"translate({xScale(tick)}, 0)\">\n                        <line y2={height - padding.bottom - padding.top} />\n                        <g transform=\"translate(0,0)\">\n                            <text y={height - padding.bottom - padding.top + 25}>\n                                {format(tick, i)}\n                            </text>\n                        </g>\n                    </g>\n                {/each}\n            </g>\n            <g class=\"values\">\n                {#each byYear as d}\n                    <g class=\"year\" transform=\"translate({xScale(d.year + 0.5)},0)\">\n\n                        {#if d.tAvg < baseTemp}\n                            <line class=\"colder\" y1={yScale(0)} y2={yScale(d.tAvg - baseTemp)} />\n                        {/if}\n                        {#if d.tAvg > baseTemp}\n                            <line class=\"hotter\" y1={yScale(0)} y2={yScale(d.tAvg - baseTemp)} />\n                        {/if}\n\n                    </g>\n                {/each}\n            </g>\n            <g class=\"axis y-axis\">\n                <line\n                    class=\"zero\"\n                    transform=\"translate(0,{yScale(0)})\"\n                    x1={padding.left}\n                    x2={width - padding.right} />\n            </g>\n\n            <line\n                class=\"trend\"\n                x1={xScale(byYear[0].year)}\n                y1={yScale(sq(byYear[0].year))}\n                x2={xScale(maxYear + 1)}\n                y2={yScale(sq(maxYear + 1))} />\n        </g>\n    </svg>\n</div>\n",
    "<script>\n    import { csv } from 'd3-fetch';\n    import { group } from 'd3-array';\n    import { maxDate, msg, language } from '../stores';\n    import { tick } from 'svelte';\n    import { timeFormat } from 'd3-time-format';\n\n    const parseStations = d => ({\n        ...d,\n        from: new Date(d.from),\n        to: new Date(d.to),\n        altitude: +d.altitude\n    });\n\n    const tfmt = timeFormat('%Y/%m/%d');\n\n    let userSelectedStation = false;\n\n    export let station;\n\n    export let stations = [];\n    $: groupedStations = Array.from(group(stations, d => d.state))\n        .map(([k, v]) => v)\n        .sort((a, b) => (a[0].state > b[0].state ? 1 : a[0].state < b[0].state ? -1 : 0));\n\n    const loadStations = csv(\n        '/blog/interactives/2019-too-warm/data/stations.csv',\n        parseStations\n    ).then(async res => {\n        stations = res\n            .filter(d => d.from.getFullYear() <= 1980 && d.to.getFullYear() >= 2019)\n            .sort((a, b) => (a.name > b.name ? 1 : a.name < b.name ? -1 : 0));\n\n        await tick();\n        hashChange();\n        if (!station) {\n            // try to get location from user\n            // findNearestStation();\n\n            // pick random station\n            const initStations = [\n                '00433'\n                // '01975',\n                // '03668',\n                // '00691',\n                // '05792',\n                // '01420',\n                // '03987',\n                // '03126',\n                // '01270',\n                // '00880',\n                // '02667'\n            ];\n            const random = initStations[Math.floor(Math.random() * 0.99 * initStations.length)];\n            station = stations.find(s => s.id === random);\n        } else {\n            userSelectedStation = true;\n        }\n    });\n\n    // $: {\n    //     if (station && station.name) {\n    //         const hashParts = [$language];\n    //         if (userSelectedStation) {\n    //             hashParts.push(station.id);\n    //             hashParts.push(\n    //                 station.name\n    //                     .toLowerCase()\n    //                     .split('(')[0]\n    //                     .trim()\n    //                     .replace(/ö/g, 'oe')\n    //                     .replace(/ä/g, 'ae')\n    //                     .replace(/ü/g, 'ue')\n    //                     .replace(/[^a-z-]/g, '')\n    //             );\n    //         }\n    //         if (tfmt($maxDate) < tfmt(new Date())) {\n    //             hashParts.push(tfmt($maxDate));\n    //         }\n    //         window.location.hash = `#/${hashParts.join('/')}`;\n    //     }\n    // }\n\n    function hashChange() {\n        const match = window.location.hash.match(\n            /^#\\/(de|en)(?:\\/(\\d{5})\\/[^\\/]+)?(?:\\/(\\d{4}\\/\\d{2}\\/\\d{2}))?/\n        );\n        if (match && stations.length) {\n            const [lang, sid, date] = match.slice(1);\n            if (lang) $language = lang;\n\n            if (!station || (sid && sid !== station.id)) {\n                station = stations.find(d => d.id === sid);\n            }\n\n            if (date) {\n                // restore maxDate\n                $maxDate = new Date(date);\n            }\n        }\n    }\n\n    function latLonDist(lat1, lon1, lat2, lon2) {\n        const p = 0.017453292519943295; // This is  Math.PI / 180\n        const c = Math.cos;\n        const a =\n            0.5 -\n            c((lat2 - lat1) * p) / 2 +\n            (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\n        const R = 6371; //  Earth distance in km so it will return the distance in km\n        return 2 * R * Math.asin(Math.sqrt(a));\n    }\n\n    function findNearestStation(event) {\n        // navigator.geolocation.getCurrentPosition(\n        //     position => {\n        //         const { latitude, longitude } = position.coords;\n        //         // compute distances\n        //         stations.forEach(s => {\n        //             s.dist = latLonDist(latitude, longitude, s.lat, s.lon);\n        //         });\n        //         userSelectedStation = !!event;\n        //         station = stations.sort((a, b) => a.dist - b.dist)[0];\n        //     },\n        //     () => {}\n        // );\n    }\n</script>\n\n<style>\n    a i.im {\n        font-size: 16px;\n        position: relative;\n        top: 2px;\n    }\n    label {\n        display: block;\n    }\n</style>\n\n<!-- <svelte:window on:hashchange={() => hashChange(false)} /> -->\n\n{#await loadStations then res}\n    <label class=\"form-text\">{$msg.selectStation.replace('%count%', stations.length)}</label>\n\n    <select\n        class=\"custom-select\"\n        bind:value={station}\n        on:change={() => (userSelectedStation = true)}>\n        <option value={null}>(select station)</option>\n        {#each groupedStations as stations}\n            <optgroup label={stations[0].state}>\n                {#each stations as s}\n                    <option value={s}>{s.name}</option>\n                {/each}\n            </optgroup>\n        {/each}\n    </select>\n    oder\n    <a href=\"#/near-me\" on:click|preventDefault={findNearestStation}>\n        <i class=\"im im-location\" />\n        Wetterstation in meiner Nähe finden\n    </a>\n\n    <hr />\n    <table>\n\n        <tr>\n            <th class=\"pr-4\">Ausgewählte Station:</th>\n            <td>{station.name}, {station.state}</td>\n        </tr>\n        <tr>\n            <th>{$msg.timerange}:</th>\n            <td>{station.from.getFullYear()} - {station.to.getFullYear()}</td>\n        </tr>\n        <tr>\n            <th>{$msg.location}:</th>\n            <td>\n                <a\n                    target=\"_blank\"\n                    href=\"https://www.openstreetmap.org/#map=19/{station.lat}/{station.lon}\">\n                    {(+station.lat).toFixed(2)}, {(+station.lon).toFixed(2)}\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <th>{$msg.altitude}:</th>\n            <td>{station.altitude}m</td>\n        </tr>\n    </table>\n\n{/await}\n",
    "<script>\n    import { timeFormat } from 'd3-time-format';\n    import { timeDay, timeMonth } from 'd3-time';\n    import { maxDate, msg } from '../stores';\n\n    const tfmt = timeFormat('%Y');\n\n    $: yearStr = tfmt($maxDate);\n\n    function changeDate(prop, offset, delay = 300) {\n        let d = new Date($maxDate);\n        d[`set${prop}`](d[`get${prop}`]() + offset);\n        // move date to last of month\n        d = timeDay.offset(timeMonth.ceil(d), -1);\n        if (d >= new Date()) d = new Date();\n        $maxDate = d;\n    }\n\n    const prevMonth = () => changeDate('Month', -1);\n    const nextMonth = () => changeDate('Month', +1);\n    const prevYear = () => changeDate('FullYear', -1);\n    const nextYear = () => changeDate('FullYear', +1);\n\n    function handleDateChange(event) {\n        if (+event.target.value > 1881 && event.target.value < 2021) {\n            $maxDate = new Date(event.target.value, 11, 31);\n        }\n    }\n</script>\n\n<style>\n    .btn i.im {\n        font-size: 10px;\n        margin: 0 -3px;\n    }\n    input[type='number'] {\n        max-width: 5em;\n    }\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n        /* display: none; <- Crashes Chrome on hover */\n        -webkit-appearance: none;\n        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n    input[type='number'] {\n        -moz-appearance: textfield; /* Firefox */\n    }\n    .form-inline {\n        margin-bottom: 20px;\n    }\n    .btn-group input[type='number'] {\n        border-left: 0;\n        border-right: 0;\n        text-align: center;\n        border-radius: 0;\n    }\n</style>\n\n<div class=\"form-inline\">\n\n    <label>{$msg.month}</label>\n    <div class=\"btn-group ml-2 mr-2\">\n        <button class=\"btn btn-sm btn-outline-secondary\" on:click={prevMonth}>\n            <i class=\"fa fa-caret-left\" />\n        </button>\n        <button class=\"btn btn-sm btn-outline-secondary\" on:click={nextMonth}>\n            <i class=\"fa fa-caret-right\" />\n        </button>\n    </div>\n\n    <label>{$msg.year}</label>\n    <div class=\"btn-group ml-2 mr-2\">\n        <button class=\"btn btn-sm btn-outline-secondary\" on:click={prevYear}>\n            <i class=\"fa fa-caret-left\" />\n        </button>\n        <input\n            class=\"form-control form-control-sm\"\n            type=\"number\"\n            value={$maxDate.getFullYear()}\n            on:input={handleDateChange}\n            on:change={handleDateChange} />\n        <button class=\"btn btn-sm btn-outline-secondary\" on:click={nextYear}>\n            <i class=\"fa fa-caret-right\" />\n        </button>\n    </div>\n\n    <button\n        class=\"btn btn-sm btn-outline-secondary ml-2\"\n        on:mousedown={() => ($maxDate = new Date())}>\n        {$msg.today}\n    </button>\n\n</div>\n",
    "<script>\n    import { scaleTime, scaleLinear } from 'd3-scale';\n    import { clientPoint } from 'd3-selection';\n    import scaleFisheye from './fisheye';\n    import { timeMonth, timeDay, timeDays } from 'd3-time';\n    import { timeFormat } from 'd3-time-format';\n    import { mean, quantileSorted, group, ascending, max, min } from 'd3-array';\n    import {\n        msg,\n        toF,\n        innerWidth,\n        chartWidth,\n        formatTemp,\n        minDate,\n        maxDate,\n        contextMinYear,\n        contextMaxYear,\n        getTempTicks,\n        useFahrenheit,\n        smoothNormalRangeWidth\n    } from './stores';\n    import { tweened } from 'svelte/motion';\n    import { cubicOut } from 'svelte/easing';\n\n    let chart;\n    export let data = [];\n    let tMin = -29;\n    let tMax = 45;\n    export let layers = [];\n\n    $: zoomed = $distortion > 0;\n\n    $: dataClean = data.filter(d => d.tMin > -999 && d.tMax > -999);\n\n    $: dataSmooth =\n        $smoothNormalRangeWidth > 0\n            ? dataClean.map((d, i) => {\n                  return {\n                      date: d.date,\n                      dateRaw: d.dateRaw,\n                      tMin: mean(\n                          dataClean\n                              .slice(\n                                  Math.max(0, i - $smoothNormalRangeWidth),\n                                  i + $smoothNormalRangeWidth + 1\n                              )\n                              .map(d => d.tMin)\n                      ),\n                      tAvg: mean(\n                          dataClean\n                              .slice(\n                                  Math.max(0, i - $smoothNormalRangeWidth),\n                                  i + $smoothNormalRangeWidth + 1\n                              )\n                              .map(d => d.tAvg)\n                      ),\n                      tMax: mean(\n                          dataClean\n                              .slice(\n                                  Math.max(0, i - $smoothNormalRangeWidth),\n                                  i + $smoothNormalRangeWidth + 1\n                              )\n                              .map(d => d.tMax)\n                      )\n                  };\n              })\n            : dataClean;\n\n    $: padding = { top: 20, right: 5, bottom: 30, left: innerWidth < 400 ? 30 : 40 };\n\n    let distortion = tweened(0, {\n        duration: 600,\n        easing: cubicOut\n    });\n    let focus = 10;\n\n    $: xScale = scaleFisheye(scaleTime, $distortion, focus)\n        .domain([$minDate, $maxDate])\n        .range([padding.left, $chartWidth - padding.right]);\n\n    $: xTicks = xScale.ticks(timeMonth);\n\n    $: yScale = scaleLinear()\n        .domain([tMin, tMax])\n        .range([height - padding.bottom, padding.top]);\n\n    $: yTicks = $getTempTicks(yScale, 6);\n\n    $: height = Math.max(\n        450,\n        Math.min(500, $chartWidth * ($chartWidth > 800 ? 0.35 : $chartWidth > 500 ? 0.7 : 1))\n    );\n\n    $: format = (d, i) => $msg.monthLong[d.getMonth()];\n    $: formatMobile = (d, i) => $msg.monthShort[d.getMonth()];\n\n    const midMonth = d => {\n        return new Date(\n            d.getTime() + (new Date(d.getFullYear(), d.getMonth() + 1, d.getDate()) - d) / 2\n        );\n    };\n\n    const fmt = timeFormat('-%m-%d');\n\n    let grouped;\n\n    function handleMouseClick(event) {\n        const x = clientPoint(chart, event)[0];\n        if (isNaN(x)) return;\n        const oldFocus = focus;\n        event.preventDefault();\n        distortion.set(zoomed && (event.type !== 'touchstart')? 0 : 3);\n        focus = x;\n    }\n    function handleMouseMove(event) {\n        event.preventDefault();\n        const x = clientPoint(chart, event)[0];\n        if (isNaN(x)) return;\n        focus = x;\n    }\n    function handleMouseLeave(event) {\n        // distortion.set(0);\n    }\n\n    $: {\n        const cache = group(dataClean, d => d.dateRaw.substr(4));\n        const cacheSmooth = group(dataSmooth, d => d.dateRaw.substr(4));\n\n        tMin = 99;\n        tMax = -99;\n\n        grouped = timeDays($minDate, timeDay.offset($maxDate, 1)).map(day => {\n            const dayFmt = fmt(day);\n            const groupedAll = cache.get(dayFmt).filter(d => d.date.getTime() < $minDate.getTime());\n            const tMinAbs = min(groupedAll, d => d.tMin);\n            const tMaxAbs = max(groupedAll, d => d.tMax);\n            const grouped = cacheSmooth\n                .get(dayFmt)\n                .filter(\n                    d =>\n                        d.date.getFullYear() >= $contextMinYear &&\n                        d.date.getFullYear() < $contextMaxYear\n                );\n            const tMinSorted = grouped.map(d => d.tMin).sort(ascending);\n            const tAvgSorted = grouped.map(d => d.tAvg).sort(ascending);\n            const tMaxSorted = grouped.map(d => d.tMax).sort(ascending);\n\n            const dateRaw = day.getFullYear() + dayFmt;\n            const cur = data.find(d => d.dateRaw === dateRaw);\n            tMin = Math.min(tMin, tMinAbs - 5);\n            tMax = Math.max(tMax, tMaxAbs + 5);\n            if (cur) {\n                tMin = Math.min(tMin, cur.tMin - 5);\n                tMax = Math.max(tMax, cur.tMax + 5);\n            }\n            const tAvg = quantileSorted(tAvgSorted, 0.5);\n            return {\n                date: day,\n                dateRaw,\n                grouped,\n                tMin: mean(tMinSorted),\n                tAvg,\n                tMax: mean(tMaxSorted),\n                tMinAbs,\n                tMaxAbs,\n                tMinSorted,\n                tAvgSorted,\n                tMaxSorted\n            };\n        });\n\n        while (tMax - tMin < 40) {\n            tMax++;\n            tMin--;\n        }\n    }\n</script>\n\n<style>\n    .chart {\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n        cursor: zoom-in;\n    }\n    .chart.zoomed {\n        cursor: zoom-out;\n    }\n\n    svg {\n        position: relative;\n        width: 100%;\n        overflow: visible;\n    }\n\n    .tick {\n        font-size: 0.725em;\n        font-weight: 200;\n    }\n\n    .tick line {\n        stroke: var(--tick-line);\n        shape-rendering: crispEdges;\n    }\n\n    .tick text {\n        fill: #666;\n        font-weight: 500;\n        font-size: 15px;\n        text-anchor: start;\n    }\n\n    .x-axis .tick text {\n        text-anchor: middle;\n        dominant-baseline: alphabetic;\n    }\n\n    line.zero {\n        shape-rendering: crispEdges;\n        stroke: black;\n        opacity: 0.25;\n    }\n\n    @media (max-width: 400px) {\n        .tick text {\n            font-size: 13px;\n        }\n    }\n</style>\n\n<svelte:window bind:innerWidth={$innerWidth} />\n\n<div\n    bind:this={chart}\n    class:zoomed\n    class=\"chart\"\n    bind:clientWidth={$chartWidth}\n    on:click={handleMouseClick}\n    on:touchstart={handleMouseClick}\n    on:mousemove={handleMouseMove}\n    on:touchmove={handleMouseMove}\n    on:mouseleave={handleMouseLeave}>\n    <svg {height}>\n        <g>\n            <!-- y axis -->\n            <g class=\"axis y-axis\">\n                {#each yTicks as tick, i}\n                    <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick)})\">\n                        <line x2=\"100%\" />\n                        <text y=\"-4\">\n                            {@html $formatTemp(tick, !i)}\n                        </text>\n                    </g>\n                {/each}\n            </g>\n\n            <!-- x axis -->\n            <g class=\"axis x-axis\">\n                {#each xTicks as tick, i}\n                    <g class=\"tick tick-{tick}\" transform=\"translate({xScale(tick)},{height})\">\n                        <line y1=\"-{height}\" y2=\"-{padding.bottom}\" x1=\"0\" x2=\"0\" />\n                        {#if midMonth(tick) < $maxDate}\n                            <g transform=\"translate({xScale(midMonth(tick)) - xScale(tick)},-50)\">\n                                <text y=\"0\">\n                                    {innerWidth > 400 ? format(tick, i) : formatMobile(tick, i)}\n                                </text>\n                                {#if (!i && tick.getMonth() < 11) || !tick.getMonth()}\n                                    <text class=\"year\" y=\"20\">{tick.getFullYear()}</text>\n                                {/if}\n                            </g>\n                        {/if}\n                    </g>\n                {/each}\n            </g>\n\n            {#each layers as layer}\n                <svelte:component this={layer} {data} {grouped} {xScale} {yScale} />\n            {/each}\n\n            <line class=\"zero\" transform=\"translate(0,{yScale(0)})\" x2=\"100%\" />\n        </g>\n    </svg>\n</div>\n",
    "<script>\n    export let xScale;\n    export let yScale;\n    export let grouped;\n\n    import { line, curveBasis } from 'd3-shape';\n\n    $: pathData = path(grouped);\n\n    $: path = line()\n        .x(d => xScale(d.date))\n        .y(d => yScale(d.tAvg))\n        .curve(curveBasis);\n</script>\n\n<style>\n    path {\n        stroke: #000;\n        opacity: 0.75;\n        stroke-linejoin: round;\n        fill: none;\n    }\n</style>\n\n<g class=\"normal-temp\">\n    <path d={pathData} />\n</g>\n",
    "<script>\n    import { showAnomalies } from '../stores';\n    import Steps from './Steps.svelte';\n\n    export let xScale;\n    export let yScale;\n    export let grouped;\n</script>\n\n<style>\n    g :global(path) {\n        fill: #888;\n        opacity: 0.5;\n    }\n    g.faint :global(path) {\n        opacity: 0.25;\n    }\n</style>\n\n<g class=\"normal-temp-range\" class:faint={$showAnomalies}>\n    <Steps {xScale} {yScale} data={grouped} />\n</g>\n",
    "<script>\n    import { clientPoint } from '../utils.js';\n    import { timeFormat } from 'd3-time-format';\n    import { timeDay } from 'd3-time';\n    import {\n        msg,\n        language,\n        minDate,\n        maxDate,\n        showAnomalies,\n        labelRecordTemperatures,\n        formatTemp\n    } from '../stores';\n\n    export let xScale;\n    export let yScale;\n    export let data;\n    export let grouped;\n\n    $: fmt = date =>\n        $language === 'de'\n            ? `${date.getDate()}. ${$msg.monthShort[date.getMonth()]}`\n            : `${$msg.monthShort[date.getMonth()]} ${date.getDate()}`;\n\n    const compFmt = timeFormat('%Y-%m-%d');\n\n    let layer;\n    let highlight;\n\n    $: pxPerDay = (xScale.range()[1] - xScale.range()[0]) / timeDay.count(...xScale.domain());\n    $: thin = pxPerDay < 3;\n    $: filteredData = data.filter(\n        d => d.dateRaw >= compFmt($minDate) && d.dateRaw <= compFmt($maxDate)\n    );\n\n    $: highlightDay = highlight ? filteredData.find(d => sameDay(d.date, highlight)) : null;\n\n    $: currentTempData = filteredData\n        .map(d => {\n            if ($showAnomalies) {\n                const m = grouped.find(e => e.dateRaw === d.dateRaw);\n                // console.log(m);\n                if (m) {\n                    d.trendMin = m.tMin;\n                    d.trendMax = m.tMax;\n                    d.tMinAbs = m.tMinAbs;\n                    d.tMaxAbs = m.tMaxAbs;\n                    if (d.tMax > d.tMaxAbs || d.tMin < d.tMinAbs) {\n                        d.labelMaxRecord = true;\n                        d.labelMinRecord = true;\n                    }\n                }\n            }\n            return d;\n        })\n        .map((d, i) => {\n            if ($labelRecordTemperatures) {\n                if (d.tMax > d.tMaxAbs || d.tMin < d.tMinAbs) {\n                    // check if we're a local max\n                    const checkDays = pxPerDay < 3 ? 13 : 8;\n                    filteredData.slice(Math.max(0, i - checkDays), i + checkDays + 1).forEach(e => {\n                        if (d !== e && e.tMax > e.tMaxAbs && e.labelMaxRecord) {\n                            // e is also a record\n                            if (e.tMax >= d.tMax) {\n                                d.labelMaxRecord = false;\n                            }\n                        }\n                        if (d !== e && e.tMin < e.tMinAbs && e.labelMinRecord) {\n                            // e is also a record\n                            if (e.tMin <= d.tMin) {\n                                d.labelMinRecord = false;\n                            }\n                        }\n                    });\n                }\n            }\n            return d;\n        });\n\n    function handleMouseMove(event) {\n        const [x, y] = clientPoint(layer, event);\n        const date = xScale.invert(x);\n        const temp = yScale.invert(y);\n        highlight = temp >= yScale.domain()[0] && temp <= yScale.domain()[1] ? date : null;\n    }\n\n    function sameYear(date1, date2) {\n        return date1.getFullYear() === date2.getFullYear();\n    }\n    function sameMonth(date1, date2) {\n        return sameYear(date1, date2) && date1.getMonth() === date2.getMonth();\n    }\n    function sameDay(date1, date2) {\n        return sameMonth(date1, date2) && date1.getDate() === date2.getDate();\n    }\n</script>\n\n<style>\n    circle {\n        fill: var(--def-color);\n    }\n    line {\n        stroke: var(--def-color);\n        stroke-width: 2;\n        shape-rendering: crispEdges;\n    }\n    .thin line {\n        stroke-width: 1;\n    }\n    circle.hotter,\n    .record.high path,\n    .record.high text {\n        fill: var(--hotter-color);\n    }\n    circle.colder,\n    .record.low path,\n    .record.low text {\n        fill: var(--colder-color);\n    }\n    circle.normal {\n        fill: var(--normal-color);\n    }\n    line.hotter {\n        stroke: var(--hotter-color);\n    }\n    line.colder {\n        stroke: var(--colder-color);\n    }\n    line.normal {\n        stroke: var(--normal-color);\n    }\n    g.record text {\n        font-weight: 400;\n        font-size: 13px;\n        dominant-baseline: central;\n    }\n    g.highlight g.day.highlight {\n        opacity: 1;\n    }\n    g.highlight g.day.highlight line {\n        stroke: black;\n        stroke-width: 2;\n    }\n    g.highlight g.day.highlight circle {\n        fill: black;\n        stroke: black;\n        stroke-width: 1;\n    }\n    g.highlight g.day.highlight .buffer line {\n        stroke: #dedede;\n        stroke-linejoin: round;\n        stroke-linecap: round;\n        stroke-width: 8;\n    }\n    g.highlight g.day.highlight .buffer circle {\n        fill: #dedede;\n        stroke: #dedede;\n        stroke-width: 4;\n    }\n\n    text {\n        pointer-events: none;\n        text-anchor: middle;\n        font-size: 14px;\n        font-weight: 500;\n    }\n    text.date {\n        opacity: 0.6;\n    }\n    text.min {\n        dominant-baseline: text-before-edge;\n    }\n    text.avg {\n        text-anchor: start;\n        dominant-baseline: central;\n    }\n    .highlight .buffer text {\n        fill: var(--bg);\n        stroke: var(--bg);\n        stroke-width: 4;\n        stroke-linejoin: round;\n        stroke-linecap: round;\n    }\n    .highlight.focus {\n        pointer-events: none;\n    }\n</style>\n\n<svelte:window\n    on:mousemove={handleMouseMove}\n    on:touchmove={handleMouseMove}\n    on:mouseout={() => (highlight = null)} />\n\n<g bind:this={layer} class:highlight>\n    {#each currentTempData as d}\n        <g\n            class=\"day\"\n            class:thin\n            class:highlight={highlight && sameDay(highlight, d.date)}\n            transform=\"translate({xScale(d.date)},0)\">\n            {#if $showAnomalies && !(highlight && sameDay(highlight, d.date))}\n                {#if d.tMin < d.trendMin}\n                    <line\n                        class=\"colder\"\n                        y1={yScale(d.tMin)}\n                        y2={yScale(Math.min(d.tMax, d.trendMin))} />\n                {/if}\n                {#if d.tMax > d.trendMax}\n                    <line\n                        class=\"hotter\"\n                        y1={yScale(d.tMax)}\n                        y2={yScale(Math.max(d.tMin, d.trendMax))} />\n                {/if}\n                {#if d.tMin < d.trendMax && d.tMax > d.trendMin}\n                    <line\n                        class=\"normal\"\n                        y1={yScale(Math.max(d.trendMin, d.tMin))}\n                        y2={yScale(Math.min(d.trendMax, d.tMax))} />\n                {/if}\n            {:else}\n                <line y1={yScale(d.tMin)} y2={yScale(d.tMax)} />\n            {/if}\n\n            <circle\n                class:hotter={$showAnomalies && d.tAvg > d.trendMax}\n                class:colder={$showAnomalies && d.tAvg < d.trendMin}\n                class:normal={$showAnomalies && d.tAvg >= d.trendMin && d.tAvg <= d.trendMax}\n                r={(highlight && sameDay(highlight, d.date) ? 3 : 2) * (thin ? 0.75 : 1)}\n                transform=\"translate(0,{yScale(d.tAvg)})\" />\n\n            {#if $labelRecordTemperatures}\n                {#if d.tMax > d.tMaxAbs}\n                    <g class=\"record high\" transform=\"translate(0, {yScale(d.tMax) - 7})\">\n                        {#if d.labelMaxRecord}\n                            <text y=\"-15\">\n                                {@html $formatTemp(d.tMax, false)}\n                            </text>\n                        {/if}\n                        <path d=\"M0,0 L-4,-4 L 4,-4 Z\" />\n                    </g>\n                {/if}\n                {#if d.tMin < d.tMinAbs}\n                    <g class=\"record low\" transform=\"translate(0, {yScale(d.tMin) + 7})\">\n                        {#if d.labelMinRecord}\n                            <text y=\"15\">\n                                {@html $formatTemp(d.tMin, false)}\n                            </text>\n                        {/if}\n                        <path d=\"M0,0 L-4,4 L 4,4 Z\" />\n                    </g>\n                {/if}\n            {/if}\n        </g>\n    {/each}\n    {#if highlightDay}\n        <g class=\"highlight day focus\" transform=\"translate({xScale(highlightDay.date)},0)\">\n            <g class=\"buffer\">\n                <line y1={yScale(highlightDay.tMin)} y2={yScale(highlightDay.tMax)} />\n                <circle\n                    r={3 * (thin ? 0.75 : 1)}\n                    transform=\"translate(0,{yScale(highlightDay.tAvg)})\" />\n                <text class=\"date\" y={yScale(highlightDay.tMax) - 35}>\n                    {fmt(highlightDay.date)}\n                </text>\n                <text y={yScale(highlightDay.tMax) - 15}>\n                    {@html $formatTemp(highlightDay.tMax)}\n                </text>\n                <text class=\"min\" y={yScale(highlightDay.tMin) + 15}>\n                    {@html $formatTemp(highlightDay.tMin)}\n                </text>\n            </g>\n\n            <line y1={yScale(highlightDay.tMin)} y2={yScale(highlightDay.tMax)} />\n            <circle\n                r={3 * (thin ? 0.75 : 1)}\n                transform=\"translate(0,{yScale(highlightDay.tAvg)})\" />\n\n            <text class=\"date\" y={yScale(highlightDay.tMax) - 35}>{fmt(highlightDay.date)}</text>\n            <text y={yScale(highlightDay.tMax) - 15}>\n                {@html $formatTemp(highlightDay.tMax)}\n            </text>\n            <text class=\"min\" y={yScale(highlightDay.tMin) + 15}>\n                {@html $formatTemp(highlightDay.tMin)}\n            </text>\n            <!-- {#if yScale(highlightDay.tMin) - yScale(highlightDay.tMax) > 30}\n            <text class=\"avg\" x=\"5\" y={yScale(highlightDay.tAvg)}>{@html $formatTemp(highlightDay.tAvg)}</text>\n        {/if} -->\n        </g>\n    {/if}\n</g>\n",
    "<script>\n    import Steps from './Steps.svelte';\n\n    export let xScale;\n    export let yScale;\n    export let grouped;\n\n    $: records = grouped.map(d => ({\n        date: d.date,\n        tMin: d.tMinAbs,\n        tMax: d.tMaxAbs\n    }));\n</script>\n\n<style>\n    g :global(path) {\n        fill: var(--context-color);\n        opacity: 0.3;\n    }\n</style>\n\n<g>\n    <Steps {xScale} {yScale} data={records} />\n</g>\n"
  ],
  "names": [],
  "mappings": "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"
}